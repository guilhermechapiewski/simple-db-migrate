# example config file
import os

DATABASE_HOST = "localhost"
DATABASE_USER = "root"
DATABASE_PASSWORD = ""
DATABASE_NAME = "migration_example"

###############################################################################

# There is an alternative and convenient way to create your configuration
# files making it possible to override values. If you use 'os.getenv' like
# in the example below, you can pass value to override the default settings
# through the command line using:
#
# [shell]$ DATABASE_HOST='my.database.host' db-migrate (... parameters ...)
#
# The example above will override the DATABASE_HOST with 'my.database.host'
# instead of using 'localhost'.
# 
# * Example of overridable config:
# DATABASE_HOST = os.getenv("DATABASE_HOST") or "localhost"
# DATABASE_USER = os.getenv("DATABASE_USER") or "root"
# DATABASE_PASSWORD = os.getenv("DATABASE_PASSWORD") or ""
# DATABASE_NAME = os.getenv("DATABASE_NAME") or "migration_example"

###############################################################################

# In some cases you will not want to write database passwords in the config
# files (e.g. production databases passwords). You can configure the password 
# to be asked for you in the command line.
#
# DATABASE_PASSWORD = "<<ask_me>>"

###############################################################################

# Relative path from the location of this file.
# You can put multiple directories if you want, separated by ':'.
# The path can be absolute or relative (recommended).
# 
# * Example:
# DATABASE_MIGRATIONS_DIR = os.getenv("MIG_DIR") or "./migrations/dir:./another/dir"

DATABASE_MIGRATIONS_DIR = os.getenv("MIG_DIR") or "."

###############################################################################

# Script format
#
# UTC_TIMESTAMP = True will cause creation scripts to utilize a UTC timestamp
# instead of a local timestamp (default)
#
# UTC_TIMESTAMP = os.getenv("UTC_TIMESTAMP") or True
